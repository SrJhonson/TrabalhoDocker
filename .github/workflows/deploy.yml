name: CI/CD Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build da imagem da aplica√ß√£o
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao:latest ./backend

      - name: Push da imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/minha-aplicacao:latest

      - name: Copiar arquivos para o servidor remoto
        uses: appleboy/scp-action@master
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "~/app"
          strip_components: 0

      - name: Executar deploy remoto
        uses: appleboy/ssh-action@master
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app

            echo "üöÄ Iniciando SonarQube na porta 8151 com mem√≥ria garantida..."
            docker stop sonar || true
            docker rm sonar || true
            docker run -d --name sonar \
              --restart=unless-stopped \
              -p 8151:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -e SONAR_JAVA_OPTS="-Xmx1G -Xms1G" \
              sonarqube:9.9.4-community

            echo "‚è≥ Aguardando SonarQube responder com HTTP 200..."
            for i in {1..60}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8151/api/system/status)
              if [ "$code" = "200" ]; then
                echo "‚úÖ SonarQube est√° no ar e respondeu com 200!"
                echo "üßò Aguardando mais 15 segundos para garantir que o Sonar esteja 100% carregado..."
                sleep 15
                break
              fi
              echo "‚è±Ô∏è Tentativa $i: aguardando SonarQube (respondeu $code)..."
              sleep 5
            done

            echo "üß™ Rodando an√°lise com sonar-scanner (v4.7)..."
            docker run --rm \
              --network=host \
              -v $PWD:/usr/src \
              -w /usr/src \
              sonarsource/sonar-scanner-cli:4.7 \
              sonar-scanner \
                -Dsonar.projectKey=videogame-app \
                -Dsonar.projectName="Videogame App" \
                -Dsonar.sources=. \
                -Dsonar.host.url=http://localhost:8151 \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                -Dsonar.scanner.skip=bootstrap

            if [ $? -ne 0 ]; then
              echo "‚ùå An√°lise do Sonar falhou. Encerrando pipeline."
              exit 1
            fi

            echo "üìä An√°lise finalizada com sucesso!"
            docker stop sonar || true

            echo "üîÑ Atualizando aplica√ß√£o com Docker Compose..."
            docker compose down
            docker compose up -d --build

            echo "‚úÖ Deploy conclu√≠do com sucesso!"
